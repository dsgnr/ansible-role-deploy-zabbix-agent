---
- name: Gather service facts
  service_facts:

- name: Include tasks for Ubuntu and Debian
  include_tasks: ubuntu.yml
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Include tasks for Centos and RHEL
  include_tasks: rhel.yml
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Install the latest version of zabbix-agent
  package:
    name: zabbix-agent
    state: present

- name: Update the zabbix-agent configuration
  become: yes
  lineinfile:
    dest: /etc/zabbix/zabbix_agentd.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - regexp: "^Server="
      line: "Server={{ zabbix_listen_server }}"
    - regexp: "^# ListenPort="
      line: "ListenPort={{ zabbix_listen_port }}"
    - regexp: "^ServerActive="
      line: "ServerActive={{ zabbix_listen_server_active }}"
    - regexp: "^Hostname="
      line: "Hostname={{ ansible_hostname }}"
    - regexp: "^# Timeout="
      line: "Timeout={{ zabbix_timeout_limit }}"
  notify:
    - Restart zabbix-agent

- name: Enable zabbix-agent to start on boot
  service:
    name: zabbix-agent
    enabled: yes

- name: Create /etc/zabbix/zabbix_agentd.d
  file:
    path: /etc/zabbix/zabbix_agentd.d
    state: directory

- name: Check for /root/.my.cnf
  stat:
    path: /root/.my.cnf
  register: mysql_creds

- name: Create /var/lib/zabbix
  file:
    path: /var/lib/zabbix
    state: directory
  when: "'mariadb.service' in ansible_facts.services or 'mysql.service' in ansible_facts.services and mysql_creds.stat is exists"

- name: Copy file between directories on a remote server
  copy:
    src: /root/.my.cnf
    dest: /var/lib/zabbix/.my.cnf
    remote_src: yes
  when: "'mariadb.service' in ansible_facts.services or 'mysql.service' in ansible_facts.services and mysql_creds.stat is exists"

# Disk monitoring
- name: Install the package Sysstat
  package:
    name: sysstat
    state: present

- name: Create /etc/zabbix/scripts
  file:
    path: /etc/zabbix/scripts
    state: directory

- name: Copy disk stat conf
  copy:
    src: ../templates/iostat.sh
    dest: /etc/zabbix/scripts/iostat.sh
    force: no
    owner: root
    group: zabbix
    mode: a+x

- name: Copy disk stat conf
  copy:
    src: ../templates/userparameter_iostat.conf
    dest: /etc/zabbix/zabbix_agentd.d/userparameter_iostat.conf
    force: no
    owner: root
    group: root
    mode: a+x

- name: Clean old Zabbix configs
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /usr/local/zabbix/bin/lld-disks.py
    - /etc/zabbix/zabbix_agentd.d/userparameter_diskstats.conf
    - /usr/local/zabbix/bin

### Send Nginx Stats
- name: Copy Nginx stats
  template:
    src: templates/nginx_status.conf.j2
    dest: /etc/nginx/conf.d/nginx_status.conf
  when: "'nginx.service' in ansible_facts.services"

- name: Copy Redis configuration
  copy:
    src: templates/userparameter_redis.conf
    dest: /etc/zabbix/zabbix_agentd.d/userparameter_redis.conf
  when: "'redis.service' in ansible_facts.services"
  notify:
    - Restart zabbix-agent

- name: Create a new host or update an existing host's info
  local_action:
    module: zabbix_host
    server_url: "{{ zabbix_server_url }}"
    login_user: "{{ zabbix_server_api_user }}"
    login_password: "{{ vault_zabbix_api_password }}"
    host_name: "{{ inventory_hostname }}"
    visible_name: "{{ ansible_hostname }}"
    force: yes
    host_groups:
      - "{{ zabbix_host_groups }}"
    link_templates:
      - Template OS Linux
      - Template App SSH Service
      - Template Disk Performance
      - "{% if 'nginx.service' in ansible_facts.services %}Template App Nginx{% endif %}"
      - "{% if 'nginx.service' in ansible_facts.services %}Template App HTTP Service{% endif %}"
      - "{% if 'nginx.service' in ansible_facts.services %}Template App HTTPS Service{% endif %}"
      - "{% if 'haproxy.service' in ansible_facts.services %}Service HAProxy{% endif %}"
      - "{% if 'haproxy.service' in ansible_facts.services %}Template Port 8443{% endif %}"
      - "{% if 'haproxy.service' in ansible_facts.services %}Template App HTTP Service{% endif %}"
      - "{% if 'haproxy.service' in ansible_facts.services %}Template App HTTPS Service{% endif %}"
      - "{% if 'mariadb.service' in ansible_facts.services or 'mysql.service' in ansible_facts.services and mysql_creds.stat is exists %}Template DB MySQL{% endif %}"
      - "{% if 'home-assistant@homeassistant.service' in ansible_facts.services %}Template Port 8123{% endif %}"
      - "{% if 'redis.service' in ansible_facts.services %}Template App Redis{% endif %}"
    status: enabled
    state: present
    inventory_mode: automatic
    interfaces:
      - type: 1
        main: 1
        useip: 0
        ip: "{{ ansible_default_ipv4.address }}"
        dns: "{{ inventory_hostname }}"
        port: "{{ zabbix_listen_port }}"
